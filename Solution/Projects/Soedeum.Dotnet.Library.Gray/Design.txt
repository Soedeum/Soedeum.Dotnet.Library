grammar Gray

    rule Gray := {Declaration} EOF;

    rule Declaration := CharSetDeclaration ;


    rule CharSetDeclaration := 'charset' Identifier ':=' CharList;

    rule CharList := CharSet {'or' CharSet};

    rule CharSet := Identifier or Character or CharRange or CharCompliment;

    rule CharCompliment := 'not' '(' CharSet ')' ;

    rule CharRange := '(' CharValue 'to' CharValue ')' ;


    ;; Keywords
    explicit Identifier token CharSetKeyword := 'charset';

    explicit Identifier token OrKeyword := 'or';

    explicit Identifier token ToKeyword := 'to';

    explicit Identifier token NotKeyword := 'not';


    token Character := '\'' (EscapeSequence or any) '\'';

    partial token EscapeSequence := '\\' ('n' or 'r' or 't' or '\\' or '\'' or '"' or ('x' hexdigit hexdigit hexdigit )) ;

    token Identifier := (alpha or '_') {alphanumeric or '_'};

    token IsDefinedAs := ':=';

    token ParenthesesStart := '(';

    token ParenthesesEnd := ')'

    token Semicolon := ';'

    token EOF = eof;

    ;; Skip tokens
    skip token Whitespace := {whitespace};

    skip token LineComment := ';;' {linecommentchar} ;

    skip token MultilineComment := ';-' {commentchar or ('-' notsemicolon)} '-;'  ;


    charset linecommentchar := not (eol or eof);

    charset commentchar := not ('-' or eof);

    charset notsemicolon := not (';' or eof)

    charset any := not ( eof );

    charset alpha := ('a' to 'z') or ('A' to 'Z')

    charset numeric := ('0' to '9')

    charset alphanumeric := alpha or numeric

    charset hexdigit := numeric or ('A' to 'F') or ('a' to 'f');

    charset eol := '\n' or '\r';

    charset space := ' ' or '\t';

    charset whitespace := eol or space;

    charset eof := '\0';c
end