grammar Gray

    rule Gray := {Declaration} EOF;

    rule Declaration := CharSetDeclaration ;


    rule CharSetDeclaration := 'charset' Identifier ':=' CharList;

    rule CharList := CharSet {CharSetOperator CharSet};

    rule CharSetOperator := '+' or '-';

    rule CharSet := Identifier or Character or CharRange ;


    rule CharRange := '(' CharValue 'to' CharValue ')' ;


    ;; Keywords
    explicit Identifier token CharSetKeyword := 'charset';

    explicit Identifier token ToKeyword := 'to';


    token Character := '\'' (EscapeSequence or any) '\'';

    partial token EscapeSequence := '\\' ('0' 
                                        or 'n' 
                                        or 'r' 
                                        or 't' 
                                        or '\\' 
                                        or '\'' 
                                        or '"' 
                                        or ('x' hexdigit hexdigit ) 
                                        or ('u' hexdigit hexdigit hexdigit hexdigit) 
                                        or ('+' hexdigit hexdigit hexdigit hexdigit hexdigit hexdigit));

    token Identifier := (alpha or '_') {alphanumeric or '_'};

    token Union  := '+';

    token Difference := '-';

    token IsDefinedAs := ':=';

    token ParenthesesStart := '(';

    token ParenthesesEnd := ')'

    token Semicolon := ';'

    token EOF = eof;

    ;; Skip tokens     
    
    skip token Whitespace := {whitespace};
    
    skip token LineComment := ';;' {notEnd};  


    charset any := ('\0' to '\+10FFFF');

    charset notEnd := any - eol - eof;

    charset alpha := ('a' to 'z') + ('A' to 'Z');

    charset numeric := ('0' to '9');

    charset alphanumeric := alpha + numeric;

    charset hexdigit := numeric + ('A' to 'F') + ('a' to 'f');

    charset eol := '\n' + '\r';

    charset space := ' ' + '\t';

    charset whitespace := eol + space;

    charset eof := '\0';
end